name: Run Tests

on:
  push:
    tags:
      - '*'
    branches:
      - '**'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  build_images:

    runs-on: ubuntu-18.04
    if: |
      !endsWith(github.event.head_commit.message, '# ci skip') &&
      (
        startsWith(github.ref, 'refs/heads/test_docker') ||
        (
          startsWith(github.ref, 'refs/heads/main') &&
          github.repository == 'openproblems-bio/openproblems'
        )
      )

    env:
      BRANCH_NAME: "auto_update_docker_${{ github.run_number }}"

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1000

    - name: Clear space on runner
      run: ./scripts/clear_runner_diskspace.sh

    - name: Setup Docker
      uses: docker-practice/actions-setup-docker@master
      with:
        docker_version: 20.10.14

    - name: Check docker version
      run: docker --version

    - name: Install system dependencies
      run: |
        sudo apt-get update -qq || (sudo rm /etc/apt/sources.list.d/* && sudo apt-get update -yqq)
        sudo apt-get install -qy --no-install-recommends libhdf5-dev pandoc gfortran libblas-dev liblapack-dev libedit-dev llvm-dev

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: Set up Java ${{ matrix.java_version }}
      uses: actions/setup-java@v1
      with:
        java-version: 15
        architecture: x64

    - name: Set up environment
      run: |
        SCRIPTS_PATH=$(python3 -c 'import os, sysconfig; print(sysconfig.get_path("scripts",f"{os.name}_user"))')
        echo "PATH=${SCRIPTS_PATH}:${PATH}" >> $GITHUB_ENV
        echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV
        echo "PYTHON_LOCATION=$(which python3)" >> $GITHUB_ENV
        echo "UBUNTU_VERSION=`grep DISTRIB_RELEASE /etc/lsb-release | sed 's/.*=//g'`" >> $GITHUB_ENV
        # If not on the base repository, append first 6 characters of username to the image name
        # to avoid clashes on ECR
        if [[ "${{ github.repository }}" == "openproblems-bio/openproblems" ]]; then
          echo "BRANCH=`echo ${{ github.ref }} | sed 's:refs/[a-z]*/::' | sed 's:[/_]:-:g'| head -c 40`"; \
        else
          echo "BRANCH=`echo ${{ github.repository }} | awk '{print $1}' FS=/ | head -c 6`-`echo ${{ github.ref }} | sed 's:refs/[a-z]*/::' | sed 's:[/_]:-:g'| head -c 33`"; \
        fi >> $GITHUB_ENV

    - name: Cache Python packages
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.UBUNTU_VERSION }}-pip-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}
        restore-keys: ${{ env.UBUNTU_VERSION}}-pip-${{ env.pythonLocation }}-

    - name: Install Nextflow
      env:
          CAPSULE_LOG: none
          NXF_VER: 22.04.0
      run: |
        mkdir /tmp/nextflow
        cd /tmp/nextflow
        wget -qO- get.nextflow.io | bash
        sudo ln -s /tmp/nextflow/nextflow /usr/local/bin/nextflow
        nextflow -version

    - name: Install AWS CLI
      run: |
        mkdir /tmp/awscli
        cd /tmp/awscli
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install || sudo ./aws/install --update
        aws --version

    - name: Set up S3FS
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-west-2
      run: |
        sudo apt-get install -qy --no-install-recommends s3fs
        echo $AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY > ~/.passwd-s3fs
        chmod 600 ~/.passwd-s3fs
        sudo mkdir -p /mnt/openproblems-nextflow
        sudo chown $USER /mnt/openproblems-nextflow
        s3fs -o umask=0277,uid=$(id -u) openproblems-nextflow /mnt/openproblems-nextflow
        # Create bucket/ work/ and cwd/
        for dir in bucket work cwd; do
          mkdir -p /mnt/openproblems-nextflow/${dir}/${BRANCH}
        done
        ls -l /mnt/openproblems-nextflow/*/${BRANCH}

    - name: Install package & dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U wheel setuptools
        pip install -U --editable .[evaluate,process]
        python -c "import openproblems"
        openproblems-cli --version
        openproblems-cli --test-hash

    - name: Pull Docker images
      if: |
        startsWith(github.ref, 'refs/heads/main') &&
        github.repository == 'openproblems-bio/openproblems'
      run: |
        cd workflow
        snakemake -j $(nproc) docker_pull
        cd ..
#
#    - name: Build Docker images
#      if: |
#        !(
#          startsWith(github.ref, 'refs/heads/main') &&
#          github.repository == 'openproblems-bio/openproblems'
#        )
#      run: |
#        cd workflow
#        snakemake -j $(nproc) docker_build
#        cd ..

    - name: Upload Docker images
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-west-2
      run: |
        ECR_ENDPOINT="490915662541.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
          docker login --username AWS --password-stdin $ECR_ENDPOINT
        for image in $(cd docker && ls -1d */ | tr -d '/'); do
          docker tag singlecellopenproblems/${image} ${ECR_ENDPOINT}/openproblems:${BRANCH}-${image}
          docker push --quiet ${ECR_ENDPOINT}/openproblems:${BRANCH}-${image}
        done

    - name: Run test benchmark
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TOWER_ACCESS_TOKEN: ${{ secrets.TOWER_ACCESS_KEY }}
        TOWER_WORKSPACE_ID: 53907369739130
        AWS_DEFAULT_REGION: us-west-2
        NXF_DEFAULT_DSL: 1
      run: |
        RUN_NAME="$(echo "$BRANCH" | sed "s/[^a-zA-Z0-9]//g")_$(git rev-parse --short HEAD)_${GITHUB_RUN_ATTEMPT}"
        cd /mnt/openproblems-nextflow/cwd/${BRANCH}
        nextflow run \
        -revision master \
        -with-tower \
        -ansi-log false -resume \
        -profile aws,test \
        -work-dir "/mnt/openproblems-nextflow/work/${BRANCH}" \
        -bucket-dir "s3://openproblems-nextflow/bucket/${BRANCH}" \
        -name "${RUN_NAME}" \
        -e.PYTHONPATH="${PYTHONPATH}" \
        openproblems-bio/nf-openproblems \
        --branch ${BRANCH} | \
        tee >(grep --color=never --line-buffered "Monitor the execution with Nextflow Tower using this url" >> $GITHUB_STEP_SUMMARY)
      shell: /bin/bash -eou pipefail {0}

    - name: Parse results
      run: |
        python workflow/parse_nextflow.py /mnt/openproblems-nextflow/cwd/${BRANCH} /tmp/website

    - name: Upload nextflow log
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: nextflow.log
        path: /mnt/openproblems-nextflow/cwd/${{ env.BRANCH }}/.nextflow.log

    - name: AWS ECR cleanup
      if: |
        !(
          startsWith(github.ref, 'refs/heads/main') &&
          github.repository == 'openproblems-bio/openproblems'
        )
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-west-2
      run: |
        for image in $(cd docker && ls -1d */ | tr -d '/'); do
          aws ecr batch-delete-image --region $AWS_DEFAULT_REGION --repository-name openproblems --image-ids "imageTag=${BRANCH}-${image}"
        done

    - name: AWS S3 cleanup
      if: |
        success() ||
        startsWith(github.ref, 'refs/heads/main') ||
        startsWith(github.ref, 'refs/tags')
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-west-2
      run: |
        aws s3 rm --recursive "s3://openproblems-nextflow/work/${{ env.BRANCH }}"
        aws s3 rm --recursive "s3://openproblems-nextflow/bucket/${{ env.BRANCH }}"
        aws s3 rm --recursive "s3://openproblems-nextflow/cwd/${{ env.BRANCH }}"
